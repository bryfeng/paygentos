import axios from 'axios';

const API_BASE_URL = '/api'; // Assuming your API routes are under /api

// Type definition for a CustomerGroup
export interface CustomerGroup {
  id?: string; // Optional because it's generated by the DB
  name: string;
  description?: string;
  color?: string; // For UI display purposes (e.g., #3B82F6)
  created_at?: string;
  updated_at?: string;
}

export class CustomerGroupAPI {
  /**
   * Get all customer groups
   */
  static async getCustomerGroups(): Promise<CustomerGroup[]> {
    try {
      const response = await axios.get(`${API_BASE_URL}/customer-groups`);
      return response.data as CustomerGroup[];
    } catch (error) {
      console.error('Error fetching customer groups:', error);
      throw error;
    }
  }

  /**
   * Get a single customer group by its ID
   */
  static async getCustomerGroup(id: string): Promise<CustomerGroup> {
    try {
      const response = await axios.get(`${API_BASE_URL}/customer-groups/${id}`);
      return response.data as CustomerGroup;
    } catch (error) {
      console.error(`Error fetching customer group ${id}:`, error);
      throw error;
    }
  }

  /**
   * Create a new customer group
   */
  static async createCustomerGroup(groupData: Omit<CustomerGroup, 'id' | 'created_at' | 'updated_at'>): Promise<CustomerGroup> {
    try {
      const response = await axios.post(`${API_BASE_URL}/customer-groups`, groupData);
      return response.data as CustomerGroup;
    } catch (error) {
      console.error('Error creating customer group:', error);
      throw error;
    }
  }

  /**
   * Update an existing customer group
   */
  static async updateCustomerGroup(id: string, groupData: Partial<Omit<CustomerGroup, 'id' | 'created_at' | 'updated_at'>>): Promise<CustomerGroup> {
    try {
      const response = await axios.put(`${API_BASE_URL}/customer-groups/${id}`, groupData);
      return response.data as CustomerGroup;
    } catch (error) {
      console.error(`Error updating customer group ${id}:`, error);
      throw error;
    }
  }

  /**
   * Delete a customer group by its ID
   */
  static async deleteCustomerGroup(id: string): Promise<{ message: string }> {
    try {
      const response = await axios.delete(`${API_BASE_URL}/customer-groups/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error deleting customer group ${id}:`, error);
      throw error;
    }
  }
}
