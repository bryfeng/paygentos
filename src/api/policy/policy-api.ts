import axios from 'axios';

const API_BASE_URL = '/api'; // Assuming your API routes are under /api

// Type definition for a Policy
export interface Policy {
  id?: string; // Optional because it's generated by the DB
  name: string;
  description?: string;
  content?: Record<string, any> | string; // Flexible content (JSON or Text)
  version?: number;
  status?: 'draft' | 'active' | 'archived';
  created_at?: string;
  updated_at?: string;
}

export class PolicyAPI {
  /**
   * Get all policies with optional filtering
   */
  static async getPolicies(params?: { status?: string }): Promise<Policy[]> {
    try {
      const queryParams = new URLSearchParams();
      if (params?.status) {
        queryParams.append('status', params.status);
      }
      const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
      const response = await axios.get(`${API_BASE_URL}/policies${queryString}`);
      return response.data as Policy[]; // Assert type
    } catch (error) {
      console.error('Error fetching policies:', error);
      throw error; // Re-throw to allow calling code to handle
    }
  }

  /**
   * Get a single policy by its ID
   */
  static async getPolicy(id: string): Promise<Policy> {
    try {
      const response = await axios.get(`${API_BASE_URL}/policies/${id}`);
      return response.data as Policy;
    } catch (error) {
      console.error(`Error fetching policy ${id}:`, error);
      throw error;
    }
  }

  /**
   * Create a new policy
   */
  static async createPolicy(policyData: Omit<Policy, 'id' | 'created_at' | 'updated_at'>): Promise<Policy> {
    try {
      const response = await axios.post(`${API_BASE_URL}/policies`, policyData);
      return response.data as Policy;
    } catch (error) {
      console.error('Error creating policy:', error);
      throw error;
    }
  }

  /**
   * Update an existing policy
   */
  static async updatePolicy(id: string, policyData: Partial<Omit<Policy, 'id' | 'created_at' | 'updated_at'>>): Promise<Policy> {
    try {
      const response = await axios.put(`${API_BASE_URL}/policies/${id}`, policyData);
      return response.data as Policy;
    } catch (error) {
      console.error(`Error updating policy ${id}:`, error);
      throw error;
    }
  }

  /**
   * Delete a policy by its ID
   */
  static async deletePolicy(id: string): Promise<{ message: string }> {
    try {
      const response = await axios.delete(`${API_BASE_URL}/policies/${id}`);
      return response.data; // Should contain { message: '...' }
    } catch (error) {
      console.error(`Error deleting policy ${id}:`, error);
      throw error;
    }
  }
}
