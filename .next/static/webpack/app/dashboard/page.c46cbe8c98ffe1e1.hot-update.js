"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/api/customer/customer-api.ts":
/*!******************************************!*\
  !*** ./src/api/customer/customer-api.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomerAPI: () => (/* binding */ CustomerAPI)\n/* harmony export */ });\n/* harmony import */ var _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../models/customer/customer */ \"(app-pages-browser)/./src/models/customer/customer.ts\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/supabase */ \"(app-pages-browser)/./src/utils/supabase.ts\");\n// API client for customer endpoints\n\n\n// Table name in Supabase\nconst CUSTOMER_TABLE = 'customers';\n// Mock data for development/fallback - now focused on individuals\nconst MOCK_CUSTOMERS = [\n    {\n        id: '1',\n        firstName: 'John',\n        lastName: 'Smith',\n        fullName: 'John Smith',\n        dob: '1985-06-15',\n        address: '123 Main St',\n        city: 'San Francisco',\n        state: 'CA',\n        postalCode: '94105',\n        country: 'USA',\n        contacts: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.EMAIL,\n                value: 'john.smith@example.com',\n                isPrimary: true,\n                label: 'Personal'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.PHONE,\n                value: '555-123-4567',\n                isPrimary: false,\n                label: 'Mobile'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.TELEGRAM,\n                value: '@johnsmith',\n                isPrimary: false,\n                label: 'Telegram'\n            }\n        ],\n        preferredContactType: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.EMAIL,\n        idDocuments: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.IdDocumentType.DRIVERS_LICENSE,\n                number: 'DL12345678',\n                issuedBy: 'CA DMV',\n                issuedDate: '2020-01-15',\n                expiryDate: '2028-01-15',\n                isVerified: true\n            }\n        ],\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        notes: 'Prefers to be contacted during evenings.'\n    },\n    {\n        id: '2',\n        firstName: 'Emily',\n        lastName: 'Johnson',\n        fullName: 'Emily Johnson',\n        dob: '1990-08-22',\n        address: '456 Oak Avenue',\n        city: 'New York',\n        state: 'NY',\n        postalCode: '10001',\n        country: 'USA',\n        contacts: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.EMAIL,\n                value: 'emily.j@example.com',\n                isPrimary: true,\n                label: 'Work'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.PHONE,\n                value: '555-987-6543',\n                isPrimary: false,\n                label: 'Home'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.DISCORD,\n                value: 'emilyjohnson#1234',\n                isPrimary: false,\n                label: 'Discord'\n            }\n        ],\n        preferredContactType: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.DISCORD,\n        idDocuments: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.IdDocumentType.PASSPORT,\n                number: 'P12345678',\n                issuedBy: 'U.S. Department of State',\n                issuedDate: '2018-05-20',\n                expiryDate: '2028-05-19',\n                isVerified: true\n            }\n        ],\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        notes: 'Prefers Discord for quick communications.'\n    },\n    {\n        id: '3',\n        firstName: 'Miguel',\n        lastName: 'Garcia',\n        fullName: 'Miguel Garcia',\n        dob: '1978-11-30',\n        address: '789 Pine Street',\n        city: 'Miami',\n        state: 'FL',\n        postalCode: '33101',\n        country: 'USA',\n        contacts: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.EMAIL,\n                value: 'miguel.g@example.com',\n                isPrimary: false,\n                label: 'Personal'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.PHONE,\n                value: '555-456-7890',\n                isPrimary: true,\n                label: 'Mobile'\n            },\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.WHATSAPP,\n                value: '+1-555-456-7890',\n                isPrimary: false,\n                label: 'WhatsApp'\n            }\n        ],\n        preferredContactType: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.ContactType.PHONE,\n        idDocuments: [\n            {\n                type: _models_customer_customer__WEBPACK_IMPORTED_MODULE_0__.IdDocumentType.NATIONAL_ID,\n                number: 'ID98765432',\n                issuedBy: 'Florida Department of Safety',\n                issuedDate: '2019-12-10',\n                expiryDate: '2029-12-09',\n                isVerified: true\n            }\n        ],\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        notes: 'Prefers phone calls over other communication methods.'\n    }\n];\nconst CustomerAPI = {\n    // Get all customers with fallback to mock data only if database fails\n    getCustomers: async ()=>{\n        try {\n            console.log('Fetching customers from database...');\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).select('*').order('createdAt', {\n                ascending: false\n            });\n            if (error) {\n                console.warn('Error fetching customers from Supabase:', error.message);\n                console.info('Using mock customer data as fallback');\n                return MOCK_CUSTOMERS;\n            }\n            // Return actual database results, even if empty array\n            // This ensures new customers added through admin panel will be shown\n            console.log(\"Retrieved \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" customers from database\"));\n            return data || [];\n        } catch (error) {\n            console.error('Error in getCustomers:', error);\n            return MOCK_CUSTOMERS; // Fallback to mock data in case of error\n        }\n    },\n    // Get customer by ID from database (fallback to mock data only if error)\n    getCustomer: async (id)=>{\n        try {\n            console.log(\"Fetching customer \".concat(id, \" from database...\"));\n            // Convert string ID to UUID format for database if needed\n            let queryId = id;\n            if (id.length === 1) {\n                // This handles the case of mock data IDs ('1', '2', '3')\n                // being used before migration to database\n                queryId = \"00000000-0000-0000-0000-00000000000\".concat(id);\n                console.log(\"Converting simple ID \".concat(id, \" to UUID format: \").concat(queryId));\n            }\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).select('*').eq('id', queryId).single();\n            if (error) {\n                console.warn(\"Error fetching customer \".concat(id, \":\"), error.message);\n                // Only try to find in mock data if database query failed\n                const mockCustomer = MOCK_CUSTOMERS.find((c)=>c.id === id);\n                if (mockCustomer) {\n                    console.log(\"Found customer \".concat(id, \" in mock data\"));\n                    return mockCustomer;\n                }\n                return null;\n            }\n            console.log(\"Successfully retrieved customer \".concat(id, \" from database\"));\n            return data;\n        } catch (error) {\n            console.error(\"Error in getCustomer \".concat(id, \":\"), error);\n            // Last resort fallback to mock data\n            const mockCustomer = MOCK_CUSTOMERS.find((c)=>c.id === id);\n            return mockCustomer || null;\n        }\n    },\n    // Create new customer\n    createCustomer: async (customer)=>{\n        try {\n            // Add timestamps\n            const now = new Date().toISOString();\n            // Generate full name if not provided\n            let fullName = customer.fullName;\n            if (!fullName && customer.firstName && customer.lastName) {\n                fullName = \"\".concat(customer.firstName, \" \").concat(customer.lastName);\n            }\n            // Ensure contacts and idDocuments are arrays\n            const contacts = customer.contacts || [];\n            const idDocuments = customer.idDocuments || [];\n            // Make sure at least one contact is marked as primary\n            if (contacts.length > 0 && !contacts.some((c)=>c.isPrimary)) {\n                contacts[0].isPrimary = true;\n            }\n            const newCustomer = {\n                ...customer,\n                fullName,\n                contacts,\n                idDocuments,\n                createdAt: now,\n                updatedAt: now\n            };\n            // Find primary contact for logging\n            const primaryContact = contacts.find((c)=>c.isPrimary);\n            const contactInfo = primaryContact ? \"\".concat(primaryContact.type, \": \").concat(primaryContact.value) : 'No primary contact';\n            console.log('Creating new customer in database:', {\n                name: fullName,\n                contact: contactInfo,\n                document_count: idDocuments.length\n            });\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).insert([\n                newCustomer\n            ]).select().single();\n            if (error) {\n                console.error('Error creating customer:', error.message);\n                if (error.code === '23505') {\n                    throw new Error('A customer with this profile already exists');\n                }\n                throw error;\n            }\n            console.log('Successfully created customer with ID:', data.id);\n            return data;\n        } catch (error) {\n            console.error('Error in createCustomer:', error);\n            throw error; // Re-throw to allow proper error handling in UI\n        }\n    },\n    // Update customer\n    updateCustomer: async (id, customer)=>{\n        try {\n            // First get the existing customer to ensure we don't lose data\n            const { data: existingCustomer, error: fetchError } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).select('*').eq('id', id).single();\n            if (fetchError) {\n                console.error(\"Error fetching existing customer \".concat(id, \":\"), fetchError.message);\n                throw fetchError;\n            }\n            // Generate full name if first or last name is being updated\n            let fullName = customer.fullName;\n            var _customer_firstName;\n            const firstName = (_customer_firstName = customer.firstName) !== null && _customer_firstName !== void 0 ? _customer_firstName : existingCustomer.firstName;\n            var _customer_lastName;\n            const lastName = (_customer_lastName = customer.lastName) !== null && _customer_lastName !== void 0 ? _customer_lastName : existingCustomer.lastName;\n            if (!fullName && firstName && lastName) {\n                fullName = \"\".concat(firstName, \" \").concat(lastName);\n            }\n            // Handle contacts array merging if provided\n            let contacts = existingCustomer.contacts || [];\n            if (customer.contacts) {\n                contacts = customer.contacts;\n                // Ensure at least one contact is primary if there are contacts\n                if (contacts.length > 0 && !contacts.some((c)=>c.isPrimary)) {\n                    contacts[0].isPrimary = true;\n                }\n            }\n            var _customer_idDocuments;\n            // Handle ID documents array merging if provided\n            const idDocuments = (_customer_idDocuments = customer.idDocuments) !== null && _customer_idDocuments !== void 0 ? _customer_idDocuments : existingCustomer.idDocuments || [];\n            // Prepare the updated customer object\n            const updatedCustomer = {\n                ...existingCustomer,\n                ...customer,\n                fullName: fullName || existingCustomer.fullName,\n                contacts,\n                idDocuments,\n                updatedAt: new Date().toISOString()\n            };\n            // Find primary contact for logging\n            const primaryContact = contacts.find((c)=>c.isPrimary);\n            const contactInfo = primaryContact ? \"\".concat(primaryContact.type, \": \").concat(primaryContact.value) : 'No primary contact';\n            console.log(\"Updating customer \".concat(id, \":\"), {\n                name: updatedCustomer.fullName,\n                contact: contactInfo,\n                document_count: idDocuments.length\n            });\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).update(updatedCustomer).eq('id', id).select().single();\n            if (error) {\n                console.error(\"Error updating customer \".concat(id, \":\"), error.message);\n                throw error;\n            }\n            console.log(\"Successfully updated customer \".concat(id));\n            return data;\n        } catch (error) {\n            console.error(\"Error in updateCustomer \".concat(id, \":\"), error);\n            throw error; // Re-throw to allow proper error handling in UI\n        }\n    },\n    // Delete customer\n    deleteCustomer: async (id)=>{\n        try {\n            const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(CUSTOMER_TABLE).delete().eq('id', id);\n            if (error) {\n                console.error(\"Error deleting customer \".concat(id, \":\"), error.message);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in deleteCustomer \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/customer/customer-api.ts\n"));

/***/ })

});