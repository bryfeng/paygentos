"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/customers/page",{

/***/ "(app-pages-browser)/./src/api/customer/customer-api.ts":
/*!******************************************!*\
  !*** ./src/api/customer/customer-api.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomerAPI: () => (/* binding */ CustomerAPI)\n/* harmony export */ });\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/supabase */ \"(app-pages-browser)/./src/utils/supabase.ts\");\n// API client for customer endpoints\n\n// Table name in Supabase\nconst CUSTOMER_TABLE = 'customers';\n// Helper function to convert snake_case to camelCase (for API responses)\nfunction toCamelCase(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(toCamelCase);\n    }\n    return Object.keys(obj).reduce((result, key)=>{\n        // Convert snake_case to camelCase\n        const camelKey = key.replace(/(_[a-z])/g, (group)=>group.toUpperCase().replace('_', ''));\n        // Recursively convert nested objects/arrays\n        const value = typeof obj[key] === 'object' ? toCamelCase(obj[key]) : obj[key];\n        result[camelKey] = value;\n        return result;\n    }, {});\n}\n// Helper function to convert camelCase to snake_case (for database operations)\nfunction toSnakeCase(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(toSnakeCase);\n    }\n    return Object.keys(obj).reduce((result, key)=>{\n        // Convert camelCase to snake_case\n        const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n        // Recursively convert nested objects/arrays\n        const value = typeof obj[key] === 'object' ? toSnakeCase(obj[key]) : obj[key];\n        result[snakeKey] = value;\n        return result;\n    }, {});\n}\nconst CustomerAPI = {\n    // Get all customers from the database\n    getCustomers: async ()=>{\n        try {\n            console.log('Fetching customers from database...');\n            // Use created_at (snake_case) for the database query\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(CUSTOMER_TABLE).select('*').order('created_at', {\n                ascending: false\n            });\n            if (error) {\n                console.error('Error fetching customers from Supabase:', error.message);\n                throw new Error(\"Failed to fetch customers: \".concat(error.message));\n            }\n            // Return actual database results, even if empty array\n            console.log(\"Retrieved \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" customers from database\"));\n            // Convert snake_case properties to camelCase\n            return (data || []).map((customer)=>toCamelCase(customer));\n        } catch (error) {\n            console.error('Error in getCustomers:', error);\n            throw error; // Re-throw to let component handle the error\n        }\n    },\n    // Get customer by ID from database\n    getCustomer: async (id)=>{\n        try {\n            console.log(\"Fetching customer \".concat(id, \" from database...\"));\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(CUSTOMER_TABLE).select('*').eq('id', id).single();\n            if (error) {\n                console.warn(\"Error fetching customer \".concat(id, \":\"), error.message);\n                if (error.code === 'PGRST116') {\n                    return null;\n                }\n                throw new Error(\"Failed to fetch customer: \".concat(error.message));\n            }\n            console.log(\"Successfully retrieved customer \".concat(id, \" from database\"));\n            // Convert snake_case properties to camelCase\n            return toCamelCase(data);\n        } catch (error) {\n            console.error(\"Error in getCustomer(\".concat(id, \"):\"), error);\n            throw error; // Re-throw to let component handle the error\n        }\n    },\n    // Create new customer\n    createCustomer: async (customer)=>{\n        try {\n            var _customer_contacts, _customer_idDocuments;\n            // Find primary contact for logging\n            const primaryContact = (_customer_contacts = customer.contacts) === null || _customer_contacts === void 0 ? void 0 : _customer_contacts.find((c)=>c.isPrimary);\n            const contactInfo = primaryContact ? \"\".concat(primaryContact.type, \": \").concat(primaryContact.value) : 'No primary contact';\n            console.log('Creating new customer via API route:', {\n                name: customer.fullName || \"\".concat(customer.firstName, \" \").concat(customer.lastName),\n                contact: contactInfo,\n                document_count: ((_customer_idDocuments = customer.idDocuments) === null || _customer_idDocuments === void 0 ? void 0 : _customer_idDocuments.length) || 0\n            });\n            // Call our Next.js API route instead of Supabase directly\n            // This avoids CORS issues since the API route runs server-side\n            const response = await fetch('/api/customers', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(customer)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Error response from API:', errorData);\n                throw new Error(errorData.error || 'Failed to create customer');\n            }\n            const data = await response.json();\n            console.log('Successfully created customer with ID:', data.id);\n            // The API route already converts the response to camelCase\n            return data;\n        } catch (error) {\n            console.error('Error in createCustomer:', error);\n            throw error; // Re-throw to allow proper error handling in UI\n        }\n    },\n    // Update customer\n    updateCustomer: async (id, customer)=>{\n        try {\n            // First get the existing customer to ensure we don't lose data\n            const { data: existingCustomer, error: fetchError } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(CUSTOMER_TABLE).select('*').eq('id', id).single();\n            if (fetchError) {\n                console.error(\"Error fetching existing customer \".concat(id, \":\"), fetchError.message);\n                throw fetchError;\n            }\n            // Generate full name if first or last name is being updated\n            let fullName = customer.fullName;\n            var _customer_firstName;\n            const firstName = (_customer_firstName = customer.firstName) !== null && _customer_firstName !== void 0 ? _customer_firstName : existingCustomer.firstName;\n            var _customer_lastName;\n            const lastName = (_customer_lastName = customer.lastName) !== null && _customer_lastName !== void 0 ? _customer_lastName : existingCustomer.lastName;\n            if (!fullName && firstName && lastName) {\n                fullName = \"\".concat(firstName, \" \").concat(lastName);\n            }\n            // Handle contacts array merging if provided\n            let contacts = existingCustomer.contacts || [];\n            if (customer.contacts) {\n                contacts = customer.contacts;\n                // Ensure at least one contact is primary if there are contacts\n                if (contacts.length > 0 && !contacts.some((c)=>c.isPrimary)) {\n                    contacts[0].isPrimary = true;\n                }\n            }\n            var _customer_idDocuments;\n            // Handle ID documents array merging if provided\n            const idDocuments = (_customer_idDocuments = customer.idDocuments) !== null && _customer_idDocuments !== void 0 ? _customer_idDocuments : existingCustomer.idDocuments || [];\n            // Prepare the updated customer object\n            const updatedCustomer = {\n                ...existingCustomer,\n                ...customer,\n                fullName: fullName || existingCustomer.fullName,\n                contacts,\n                idDocuments,\n                updatedAt: new Date().toISOString()\n            };\n            // Find primary contact for logging\n            const primaryContact = contacts.find((c)=>c.isPrimary);\n            const contactInfo = primaryContact ? \"\".concat(primaryContact.type, \": \").concat(primaryContact.value) : 'No primary contact';\n            console.log(\"Updating customer \".concat(id, \":\"), {\n                name: updatedCustomer.fullName,\n                contact: contactInfo,\n                document_count: idDocuments.length\n            });\n            // Convert to snake_case for database\n            const dbCustomer = toSnakeCase(updatedCustomer);\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(CUSTOMER_TABLE).update(dbCustomer).eq('id', id).select().single();\n            if (error) {\n                console.error(\"Error updating customer \".concat(id, \":\"), error.message);\n                throw error;\n            }\n            console.log(\"Successfully updated customer \".concat(id));\n            // Convert back to camelCase for the application\n            return toCamelCase(data);\n        } catch (error) {\n            console.error(\"Error in updateCustomer \".concat(id, \":\"), error);\n            throw error; // Re-throw to allow proper error handling in UI\n        }\n    },\n    // Delete customer\n    deleteCustomer: async (id)=>{\n        try {\n            const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(CUSTOMER_TABLE).delete().eq('id', id);\n            if (error) {\n                console.error(\"Error deleting customer \".concat(id, \":\"), error.message);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in deleteCustomer \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/customer/customer-api.ts\n"));

/***/ })

});